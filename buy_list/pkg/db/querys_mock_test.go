// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db

import (
	"sync"
)

// Ensure, that QuerysMock does implement Querys.
// If this is not the case, regenerate this file with moq.
var _ Querys = &QuerysMock{}

// QuerysMock is a mock implementation of Querys.
//
//	func TestSomethingThatUsesQuerys(t *testing.T) {
//
//		// make and configure a mocked Querys
//		mockedQuerys := &QuerysMock{
//			AddProductToBuyListFunc: func(userId int, name string, weight string, time string) error {
//				panic("mock out the AddProductToBuyList method")
//			},
//			AddProductToFridgeFunc: func(userId int, name string, date string) error {
//				panic("mock out the AddProductToFridge method")
//			},
//			AddUserFunc: func(name string, chatId int64) error {
//				panic("mock out the AddUser method")
//			},
//			DeleteFromBuyListFunc: func(userId int, name string)  {
//				panic("mock out the DeleteFromBuyList method")
//			},
//			GetBuyListFunc: func(userId int) ([]BuyList, error) {
//				panic("mock out the GetBuyList method")
//			},
//			GetBuyListForSchedulerFunc: func(userId int) ([]BuyList, error) {
//				panic("mock out the GetBuyListForScheduler method")
//			},
//			GetFridgeListFunc: func(userId int) ([]Fridge, error) {
//				panic("mock out the GetFridgeList method")
//			},
//			GetFridgeListForSchedulerFunc: func(userId int) ([]Fridge, error) {
//				panic("mock out the GetFridgeListForScheduler method")
//			},
//			GetStatsByDateDifferenceFunc: func(userId int, firstDate string, secondDate string) ([]Fridge, error) {
//				panic("mock out the GetStatsByDateDifference method")
//			},
//			GetStoredProductsListFunc: func(userId int) ([]Fridge, error) {
//				panic("mock out the GetStoredProductsList method")
//			},
//			GetUsedProductsListFunc: func(userId int) ([]Fridge, error) {
//				panic("mock out the GetUsedProductsList method")
//			},
//			GetUserByUsernameFunc: func(username string) (Users, error) {
//				panic("mock out the GetUserByUsername method")
//			},
//			GetUsersListFunc: func() ([]Users, error) {
//				panic("mock out the GetUsersList method")
//			},
//			OpenProductFunc: func(userId int, name string, date string) error {
//				panic("mock out the OpenProduct method")
//			},
//			UpdateProductToCookedFunc: func(userId int, name string, date string) error {
//				panic("mock out the UpdateProductToCooked method")
//			},
//			UpdateProductToDisposeFunc: func(userId int, name string, date string) error {
//				panic("mock out the UpdateProductToDispose method")
//			},
//		}
//
//		// use mockedQuerys in code that requires Querys
//		// and then make assertions.
//
//	}
type QuerysMock struct {
	// AddProductToBuyListFunc mocks the AddProductToBuyList method.
	AddProductToBuyListFunc func(userId int, name string, weight string, time string) error

	// AddProductToFridgeFunc mocks the AddProductToFridge method.
	AddProductToFridgeFunc func(userId int, name string, date string) error

	// AddUserFunc mocks the AddUser method.
	AddUserFunc func(name string, chatId int64) error

	// DeleteFromBuyListFunc mocks the DeleteFromBuyList method.
	DeleteFromBuyListFunc func(userId int, name string)

	// GetBuyListFunc mocks the GetBuyList method.
	GetBuyListFunc func(userId int) ([]BuyList, error)

	// GetBuyListForSchedulerFunc mocks the GetBuyListForScheduler method.
	GetBuyListForSchedulerFunc func(userId int) ([]BuyList, error)

	// GetFridgeListFunc mocks the GetFridgeList method.
	GetFridgeListFunc func(userId int) ([]Fridge, error)

	// GetFridgeListForSchedulerFunc mocks the GetFridgeListForScheduler method.
	GetFridgeListForSchedulerFunc func(userId int) ([]Fridge, error)

	// GetStatsByDateDifferenceFunc mocks the GetStatsByDateDifference method.
	GetStatsByDateDifferenceFunc func(userId int, firstDate string, secondDate string) ([]Fridge, error)

	// GetStoredProductsListFunc mocks the GetStoredProductsList method.
	GetStoredProductsListFunc func(userId int) ([]Fridge, error)

	// GetUsedProductsListFunc mocks the GetUsedProductsList method.
	GetUsedProductsListFunc func(userId int) ([]Fridge, error)

	// GetUserByUsernameFunc mocks the GetUserByUsername method.
	GetUserByUsernameFunc func(username string) (Users, error)

	// GetUsersListFunc mocks the GetUsersList method.
	GetUsersListFunc func() ([]Users, error)

	// OpenProductFunc mocks the OpenProduct method.
	OpenProductFunc func(userId int, name string, date string) error

	// UpdateProductToCookedFunc mocks the UpdateProductToCooked method.
	UpdateProductToCookedFunc func(userId int, name string, date string) error

	// UpdateProductToDisposeFunc mocks the UpdateProductToDispose method.
	UpdateProductToDisposeFunc func(userId int, name string, date string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddProductToBuyList holds details about calls to the AddProductToBuyList method.
		AddProductToBuyList []struct {
			// UserId is the userId argument value.
			UserId int
			// Name is the name argument value.
			Name string
			// Weight is the weight argument value.
			Weight string
			// Time is the time argument value.
			Time string
		}
		// AddProductToFridge holds details about calls to the AddProductToFridge method.
		AddProductToFridge []struct {
			// UserId is the userId argument value.
			UserId int
			// Name is the name argument value.
			Name string
			// Date is the date argument value.
			Date string
		}
		// AddUser holds details about calls to the AddUser method.
		AddUser []struct {
			// Name is the name argument value.
			Name string
			// ChatId is the chatId argument value.
			ChatId int64
		}
		// DeleteFromBuyList holds details about calls to the DeleteFromBuyList method.
		DeleteFromBuyList []struct {
			// UserId is the userId argument value.
			UserId int
			// Name is the name argument value.
			Name string
		}
		// GetBuyList holds details about calls to the GetBuyList method.
		GetBuyList []struct {
			// UserId is the userId argument value.
			UserId int
		}
		// GetBuyListForScheduler holds details about calls to the GetBuyListForScheduler method.
		GetBuyListForScheduler []struct {
			// UserId is the userId argument value.
			UserId int
		}
		// GetFridgeList holds details about calls to the GetFridgeList method.
		GetFridgeList []struct {
			// UserId is the userId argument value.
			UserId int
		}
		// GetFridgeListForScheduler holds details about calls to the GetFridgeListForScheduler method.
		GetFridgeListForScheduler []struct {
			// UserId is the userId argument value.
			UserId int
		}
		// GetStatsByDateDifference holds details about calls to the GetStatsByDateDifference method.
		GetStatsByDateDifference []struct {
			// UserId is the userId argument value.
			UserId int
			// FirstDate is the firstDate argument value.
			FirstDate string
			// SecondDate is the secondDate argument value.
			SecondDate string
		}
		// GetStoredProductsList holds details about calls to the GetStoredProductsList method.
		GetStoredProductsList []struct {
			// UserId is the userId argument value.
			UserId int
		}
		// GetUsedProductsList holds details about calls to the GetUsedProductsList method.
		GetUsedProductsList []struct {
			// UserId is the userId argument value.
			UserId int
		}
		// GetUserByUsername holds details about calls to the GetUserByUsername method.
		GetUserByUsername []struct {
			// Username is the username argument value.
			Username string
		}
		// GetUsersList holds details about calls to the GetUsersList method.
		GetUsersList []struct {
		}
		// OpenProduct holds details about calls to the OpenProduct method.
		OpenProduct []struct {
			// UserId is the userId argument value.
			UserId int
			// Name is the name argument value.
			Name string
			// Date is the date argument value.
			Date string
		}
		// UpdateProductToCooked holds details about calls to the UpdateProductToCooked method.
		UpdateProductToCooked []struct {
			// UserId is the userId argument value.
			UserId int
			// Name is the name argument value.
			Name string
			// Date is the date argument value.
			Date string
		}
		// UpdateProductToDispose holds details about calls to the UpdateProductToDispose method.
		UpdateProductToDispose []struct {
			// UserId is the userId argument value.
			UserId int
			// Name is the name argument value.
			Name string
			// Date is the date argument value.
			Date string
		}
	}
	lockAddProductToBuyList       sync.RWMutex
	lockAddProductToFridge        sync.RWMutex
	lockAddUser                   sync.RWMutex
	lockDeleteFromBuyList         sync.RWMutex
	lockGetBuyList                sync.RWMutex
	lockGetBuyListForScheduler    sync.RWMutex
	lockGetFridgeList             sync.RWMutex
	lockGetFridgeListForScheduler sync.RWMutex
	lockGetStatsByDateDifference  sync.RWMutex
	lockGetStoredProductsList     sync.RWMutex
	lockGetUsedProductsList       sync.RWMutex
	lockGetUserByUsername         sync.RWMutex
	lockGetUsersList              sync.RWMutex
	lockOpenProduct               sync.RWMutex
	lockUpdateProductToCooked     sync.RWMutex
	lockUpdateProductToDispose    sync.RWMutex
}

// AddProductToBuyList calls AddProductToBuyListFunc.
func (mock *QuerysMock) AddProductToBuyList(userId int, name string, weight string, time string) error {
	if mock.AddProductToBuyListFunc == nil {
		panic("QuerysMock.AddProductToBuyListFunc: method is nil but Querys.AddProductToBuyList was just called")
	}
	callInfo := struct {
		UserId int
		Name   string
		Weight string
		Time   string
	}{
		UserId: userId,
		Name:   name,
		Weight: weight,
		Time:   time,
	}
	mock.lockAddProductToBuyList.Lock()
	mock.calls.AddProductToBuyList = append(mock.calls.AddProductToBuyList, callInfo)
	mock.lockAddProductToBuyList.Unlock()
	return mock.AddProductToBuyListFunc(userId, name, weight, time)
}

// AddProductToBuyListCalls gets all the calls that were made to AddProductToBuyList.
// Check the length with:
//
//	len(mockedQuerys.AddProductToBuyListCalls())
func (mock *QuerysMock) AddProductToBuyListCalls() []struct {
	UserId int
	Name   string
	Weight string
	Time   string
} {
	var calls []struct {
		UserId int
		Name   string
		Weight string
		Time   string
	}
	mock.lockAddProductToBuyList.RLock()
	calls = mock.calls.AddProductToBuyList
	mock.lockAddProductToBuyList.RUnlock()
	return calls
}

// AddProductToFridge calls AddProductToFridgeFunc.
func (mock *QuerysMock) AddProductToFridge(userId int, name string, date string) error {
	if mock.AddProductToFridgeFunc == nil {
		panic("QuerysMock.AddProductToFridgeFunc: method is nil but Querys.AddProductToFridge was just called")
	}
	callInfo := struct {
		UserId int
		Name   string
		Date   string
	}{
		UserId: userId,
		Name:   name,
		Date:   date,
	}
	mock.lockAddProductToFridge.Lock()
	mock.calls.AddProductToFridge = append(mock.calls.AddProductToFridge, callInfo)
	mock.lockAddProductToFridge.Unlock()
	return mock.AddProductToFridgeFunc(userId, name, date)
}

// AddProductToFridgeCalls gets all the calls that were made to AddProductToFridge.
// Check the length with:
//
//	len(mockedQuerys.AddProductToFridgeCalls())
func (mock *QuerysMock) AddProductToFridgeCalls() []struct {
	UserId int
	Name   string
	Date   string
} {
	var calls []struct {
		UserId int
		Name   string
		Date   string
	}
	mock.lockAddProductToFridge.RLock()
	calls = mock.calls.AddProductToFridge
	mock.lockAddProductToFridge.RUnlock()
	return calls
}

// AddUser calls AddUserFunc.
func (mock *QuerysMock) AddUser(name string, chatId int64) error {
	if mock.AddUserFunc == nil {
		panic("QuerysMock.AddUserFunc: method is nil but Querys.AddUser was just called")
	}
	callInfo := struct {
		Name   string
		ChatId int64
	}{
		Name:   name,
		ChatId: chatId,
	}
	mock.lockAddUser.Lock()
	mock.calls.AddUser = append(mock.calls.AddUser, callInfo)
	mock.lockAddUser.Unlock()
	return mock.AddUserFunc(name, chatId)
}

// AddUserCalls gets all the calls that were made to AddUser.
// Check the length with:
//
//	len(mockedQuerys.AddUserCalls())
func (mock *QuerysMock) AddUserCalls() []struct {
	Name   string
	ChatId int64
} {
	var calls []struct {
		Name   string
		ChatId int64
	}
	mock.lockAddUser.RLock()
	calls = mock.calls.AddUser
	mock.lockAddUser.RUnlock()
	return calls
}

// DeleteFromBuyList calls DeleteFromBuyListFunc.
func (mock *QuerysMock) DeleteFromBuyList(userId int, name string) {
	if mock.DeleteFromBuyListFunc == nil {
		panic("QuerysMock.DeleteFromBuyListFunc: method is nil but Querys.DeleteFromBuyList was just called")
	}
	callInfo := struct {
		UserId int
		Name   string
	}{
		UserId: userId,
		Name:   name,
	}
	mock.lockDeleteFromBuyList.Lock()
	mock.calls.DeleteFromBuyList = append(mock.calls.DeleteFromBuyList, callInfo)
	mock.lockDeleteFromBuyList.Unlock()
	mock.DeleteFromBuyListFunc(userId, name)
}

// DeleteFromBuyListCalls gets all the calls that were made to DeleteFromBuyList.
// Check the length with:
//
//	len(mockedQuerys.DeleteFromBuyListCalls())
func (mock *QuerysMock) DeleteFromBuyListCalls() []struct {
	UserId int
	Name   string
} {
	var calls []struct {
		UserId int
		Name   string
	}
	mock.lockDeleteFromBuyList.RLock()
	calls = mock.calls.DeleteFromBuyList
	mock.lockDeleteFromBuyList.RUnlock()
	return calls
}

// GetBuyList calls GetBuyListFunc.
func (mock *QuerysMock) GetBuyList(userId int) ([]BuyList, error) {
	if mock.GetBuyListFunc == nil {
		panic("QuerysMock.GetBuyListFunc: method is nil but Querys.GetBuyList was just called")
	}
	callInfo := struct {
		UserId int
	}{
		UserId: userId,
	}
	mock.lockGetBuyList.Lock()
	mock.calls.GetBuyList = append(mock.calls.GetBuyList, callInfo)
	mock.lockGetBuyList.Unlock()
	return mock.GetBuyListFunc(userId)
}

// GetBuyListCalls gets all the calls that were made to GetBuyList.
// Check the length with:
//
//	len(mockedQuerys.GetBuyListCalls())
func (mock *QuerysMock) GetBuyListCalls() []struct {
	UserId int
} {
	var calls []struct {
		UserId int
	}
	mock.lockGetBuyList.RLock()
	calls = mock.calls.GetBuyList
	mock.lockGetBuyList.RUnlock()
	return calls
}

// GetBuyListForScheduler calls GetBuyListForSchedulerFunc.
func (mock *QuerysMock) GetBuyListForScheduler(userId int) ([]BuyList, error) {
	if mock.GetBuyListForSchedulerFunc == nil {
		panic("QuerysMock.GetBuyListForSchedulerFunc: method is nil but Querys.GetBuyListForScheduler was just called")
	}
	callInfo := struct {
		UserId int
	}{
		UserId: userId,
	}
	mock.lockGetBuyListForScheduler.Lock()
	mock.calls.GetBuyListForScheduler = append(mock.calls.GetBuyListForScheduler, callInfo)
	mock.lockGetBuyListForScheduler.Unlock()
	return mock.GetBuyListForSchedulerFunc(userId)
}

// GetBuyListForSchedulerCalls gets all the calls that were made to GetBuyListForScheduler.
// Check the length with:
//
//	len(mockedQuerys.GetBuyListForSchedulerCalls())
func (mock *QuerysMock) GetBuyListForSchedulerCalls() []struct {
	UserId int
} {
	var calls []struct {
		UserId int
	}
	mock.lockGetBuyListForScheduler.RLock()
	calls = mock.calls.GetBuyListForScheduler
	mock.lockGetBuyListForScheduler.RUnlock()
	return calls
}

// GetFridgeList calls GetFridgeListFunc.
func (mock *QuerysMock) GetFridgeList(userId int) ([]Fridge, error) {
	if mock.GetFridgeListFunc == nil {
		panic("QuerysMock.GetFridgeListFunc: method is nil but Querys.GetFridgeList was just called")
	}
	callInfo := struct {
		UserId int
	}{
		UserId: userId,
	}
	mock.lockGetFridgeList.Lock()
	mock.calls.GetFridgeList = append(mock.calls.GetFridgeList, callInfo)
	mock.lockGetFridgeList.Unlock()
	return mock.GetFridgeListFunc(userId)
}

// GetFridgeListCalls gets all the calls that were made to GetFridgeList.
// Check the length with:
//
//	len(mockedQuerys.GetFridgeListCalls())
func (mock *QuerysMock) GetFridgeListCalls() []struct {
	UserId int
} {
	var calls []struct {
		UserId int
	}
	mock.lockGetFridgeList.RLock()
	calls = mock.calls.GetFridgeList
	mock.lockGetFridgeList.RUnlock()
	return calls
}

// GetFridgeListForScheduler calls GetFridgeListForSchedulerFunc.
func (mock *QuerysMock) GetFridgeListForScheduler(userId int) ([]Fridge, error) {
	if mock.GetFridgeListForSchedulerFunc == nil {
		panic("QuerysMock.GetFridgeListForSchedulerFunc: method is nil but Querys.GetFridgeListForScheduler was just called")
	}
	callInfo := struct {
		UserId int
	}{
		UserId: userId,
	}
	mock.lockGetFridgeListForScheduler.Lock()
	mock.calls.GetFridgeListForScheduler = append(mock.calls.GetFridgeListForScheduler, callInfo)
	mock.lockGetFridgeListForScheduler.Unlock()
	return mock.GetFridgeListForSchedulerFunc(userId)
}

// GetFridgeListForSchedulerCalls gets all the calls that were made to GetFridgeListForScheduler.
// Check the length with:
//
//	len(mockedQuerys.GetFridgeListForSchedulerCalls())
func (mock *QuerysMock) GetFridgeListForSchedulerCalls() []struct {
	UserId int
} {
	var calls []struct {
		UserId int
	}
	mock.lockGetFridgeListForScheduler.RLock()
	calls = mock.calls.GetFridgeListForScheduler
	mock.lockGetFridgeListForScheduler.RUnlock()
	return calls
}

// GetStatsByDateDifference calls GetStatsByDateDifferenceFunc.
func (mock *QuerysMock) GetStatsByDateDifference(userId int, firstDate string, secondDate string) ([]Fridge, error) {
	if mock.GetStatsByDateDifferenceFunc == nil {
		panic("QuerysMock.GetStatsByDateDifferenceFunc: method is nil but Querys.GetStatsByDateDifference was just called")
	}
	callInfo := struct {
		UserId     int
		FirstDate  string
		SecondDate string
	}{
		UserId:     userId,
		FirstDate:  firstDate,
		SecondDate: secondDate,
	}
	mock.lockGetStatsByDateDifference.Lock()
	mock.calls.GetStatsByDateDifference = append(mock.calls.GetStatsByDateDifference, callInfo)
	mock.lockGetStatsByDateDifference.Unlock()
	return mock.GetStatsByDateDifferenceFunc(userId, firstDate, secondDate)
}

// GetStatsByDateDifferenceCalls gets all the calls that were made to GetStatsByDateDifference.
// Check the length with:
//
//	len(mockedQuerys.GetStatsByDateDifferenceCalls())
func (mock *QuerysMock) GetStatsByDateDifferenceCalls() []struct {
	UserId     int
	FirstDate  string
	SecondDate string
} {
	var calls []struct {
		UserId     int
		FirstDate  string
		SecondDate string
	}
	mock.lockGetStatsByDateDifference.RLock()
	calls = mock.calls.GetStatsByDateDifference
	mock.lockGetStatsByDateDifference.RUnlock()
	return calls
}

// GetStoredProductsList calls GetStoredProductsListFunc.
func (mock *QuerysMock) GetStoredProductsList(userId int) ([]Fridge, error) {
	if mock.GetStoredProductsListFunc == nil {
		panic("QuerysMock.GetStoredProductsListFunc: method is nil but Querys.GetStoredProductsList was just called")
	}
	callInfo := struct {
		UserId int
	}{
		UserId: userId,
	}
	mock.lockGetStoredProductsList.Lock()
	mock.calls.GetStoredProductsList = append(mock.calls.GetStoredProductsList, callInfo)
	mock.lockGetStoredProductsList.Unlock()
	return mock.GetStoredProductsListFunc(userId)
}

// GetStoredProductsListCalls gets all the calls that were made to GetStoredProductsList.
// Check the length with:
//
//	len(mockedQuerys.GetStoredProductsListCalls())
func (mock *QuerysMock) GetStoredProductsListCalls() []struct {
	UserId int
} {
	var calls []struct {
		UserId int
	}
	mock.lockGetStoredProductsList.RLock()
	calls = mock.calls.GetStoredProductsList
	mock.lockGetStoredProductsList.RUnlock()
	return calls
}

// GetUsedProductsList calls GetUsedProductsListFunc.
func (mock *QuerysMock) GetUsedProductsList(userId int) ([]Fridge, error) {
	if mock.GetUsedProductsListFunc == nil {
		panic("QuerysMock.GetUsedProductsListFunc: method is nil but Querys.GetUsedProductsList was just called")
	}
	callInfo := struct {
		UserId int
	}{
		UserId: userId,
	}
	mock.lockGetUsedProductsList.Lock()
	mock.calls.GetUsedProductsList = append(mock.calls.GetUsedProductsList, callInfo)
	mock.lockGetUsedProductsList.Unlock()
	return mock.GetUsedProductsListFunc(userId)
}

// GetUsedProductsListCalls gets all the calls that were made to GetUsedProductsList.
// Check the length with:
//
//	len(mockedQuerys.GetUsedProductsListCalls())
func (mock *QuerysMock) GetUsedProductsListCalls() []struct {
	UserId int
} {
	var calls []struct {
		UserId int
	}
	mock.lockGetUsedProductsList.RLock()
	calls = mock.calls.GetUsedProductsList
	mock.lockGetUsedProductsList.RUnlock()
	return calls
}

// GetUserByUsername calls GetUserByUsernameFunc.
func (mock *QuerysMock) GetUserByUsername(username string) (Users, error) {
	if mock.GetUserByUsernameFunc == nil {
		panic("QuerysMock.GetUserByUsernameFunc: method is nil but Querys.GetUserByUsername was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetUserByUsername.Lock()
	mock.calls.GetUserByUsername = append(mock.calls.GetUserByUsername, callInfo)
	mock.lockGetUserByUsername.Unlock()
	return mock.GetUserByUsernameFunc(username)
}

// GetUserByUsernameCalls gets all the calls that were made to GetUserByUsername.
// Check the length with:
//
//	len(mockedQuerys.GetUserByUsernameCalls())
func (mock *QuerysMock) GetUserByUsernameCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetUserByUsername.RLock()
	calls = mock.calls.GetUserByUsername
	mock.lockGetUserByUsername.RUnlock()
	return calls
}

// GetUsersList calls GetUsersListFunc.
func (mock *QuerysMock) GetUsersList() ([]Users, error) {
	if mock.GetUsersListFunc == nil {
		panic("QuerysMock.GetUsersListFunc: method is nil but Querys.GetUsersList was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUsersList.Lock()
	mock.calls.GetUsersList = append(mock.calls.GetUsersList, callInfo)
	mock.lockGetUsersList.Unlock()
	return mock.GetUsersListFunc()
}

// GetUsersListCalls gets all the calls that were made to GetUsersList.
// Check the length with:
//
//	len(mockedQuerys.GetUsersListCalls())
func (mock *QuerysMock) GetUsersListCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUsersList.RLock()
	calls = mock.calls.GetUsersList
	mock.lockGetUsersList.RUnlock()
	return calls
}

// OpenProduct calls OpenProductFunc.
func (mock *QuerysMock) OpenProduct(userId int, name string, date string) error {
	if mock.OpenProductFunc == nil {
		panic("QuerysMock.OpenProductFunc: method is nil but Querys.OpenProduct was just called")
	}
	callInfo := struct {
		UserId int
		Name   string
		Date   string
	}{
		UserId: userId,
		Name:   name,
		Date:   date,
	}
	mock.lockOpenProduct.Lock()
	mock.calls.OpenProduct = append(mock.calls.OpenProduct, callInfo)
	mock.lockOpenProduct.Unlock()
	return mock.OpenProductFunc(userId, name, date)
}

// OpenProductCalls gets all the calls that were made to OpenProduct.
// Check the length with:
//
//	len(mockedQuerys.OpenProductCalls())
func (mock *QuerysMock) OpenProductCalls() []struct {
	UserId int
	Name   string
	Date   string
} {
	var calls []struct {
		UserId int
		Name   string
		Date   string
	}
	mock.lockOpenProduct.RLock()
	calls = mock.calls.OpenProduct
	mock.lockOpenProduct.RUnlock()
	return calls
}

// UpdateProductToCooked calls UpdateProductToCookedFunc.
func (mock *QuerysMock) UpdateProductToCooked(userId int, name string, date string) error {
	if mock.UpdateProductToCookedFunc == nil {
		panic("QuerysMock.UpdateProductToCookedFunc: method is nil but Querys.UpdateProductToCooked was just called")
	}
	callInfo := struct {
		UserId int
		Name   string
		Date   string
	}{
		UserId: userId,
		Name:   name,
		Date:   date,
	}
	mock.lockUpdateProductToCooked.Lock()
	mock.calls.UpdateProductToCooked = append(mock.calls.UpdateProductToCooked, callInfo)
	mock.lockUpdateProductToCooked.Unlock()
	return mock.UpdateProductToCookedFunc(userId, name, date)
}

// UpdateProductToCookedCalls gets all the calls that were made to UpdateProductToCooked.
// Check the length with:
//
//	len(mockedQuerys.UpdateProductToCookedCalls())
func (mock *QuerysMock) UpdateProductToCookedCalls() []struct {
	UserId int
	Name   string
	Date   string
} {
	var calls []struct {
		UserId int
		Name   string
		Date   string
	}
	mock.lockUpdateProductToCooked.RLock()
	calls = mock.calls.UpdateProductToCooked
	mock.lockUpdateProductToCooked.RUnlock()
	return calls
}

// UpdateProductToDispose calls UpdateProductToDisposeFunc.
func (mock *QuerysMock) UpdateProductToDispose(userId int, name string, date string) error {
	if mock.UpdateProductToDisposeFunc == nil {
		panic("QuerysMock.UpdateProductToDisposeFunc: method is nil but Querys.UpdateProductToDispose was just called")
	}
	callInfo := struct {
		UserId int
		Name   string
		Date   string
	}{
		UserId: userId,
		Name:   name,
		Date:   date,
	}
	mock.lockUpdateProductToDispose.Lock()
	mock.calls.UpdateProductToDispose = append(mock.calls.UpdateProductToDispose, callInfo)
	mock.lockUpdateProductToDispose.Unlock()
	return mock.UpdateProductToDisposeFunc(userId, name, date)
}

// UpdateProductToDisposeCalls gets all the calls that were made to UpdateProductToDispose.
// Check the length with:
//
//	len(mockedQuerys.UpdateProductToDisposeCalls())
func (mock *QuerysMock) UpdateProductToDisposeCalls() []struct {
	UserId int
	Name   string
	Date   string
} {
	var calls []struct {
		UserId int
		Name   string
		Date   string
	}
	mock.lockUpdateProductToDispose.RLock()
	calls = mock.calls.UpdateProductToDispose
	mock.lockUpdateProductToDispose.RUnlock()
	return calls
}
